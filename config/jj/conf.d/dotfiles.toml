"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[ui]
default-command = "forest"
diff-editor = ":builtin"
diff-formatter = ":git"
pager = "delta"

[templates]
log = "logline ++ if(!description && !empty, diff.summary())"

[template-aliases]
"change_or_commit_id(commit)" = '''
if(
    commit.divergent(), 
    format_short_change_id_with_hidden_and_divergent_info(commit)
        ++ " " ++ format_short_commit_id(commit.commit_id()),
    if(
        commit.immutable(),
        format_short_commit_id(commit.commit_id()),
        format_short_change_id_with_hidden_and_divergent_info(commit)
    )
)
'''

logline = 'logline(self)'
"logline(commit)" = '''
if(commit.root(),
  format_root_commit(commit),
  label(
    separate(" ",
      if(commit.current_working_copy(), "working_copy"),
      if(commit.immutable(), "immutable", "mutable"),
      if(commit.conflict(), "conflicted"),
    ),
    concat(
      separate(" ",
        format_short_change_id_with_hidden_and_divergent_info(commit),
        format_short_commit_id(commit.commit_id()),
        format_short_signature_oneline(commit.author()),
        format_timestamp(commit_timestamp(commit)),
        commit.bookmarks(),
        commit.tags(),
        commit.working_copies(),
        if(commit.conflict(), label("conflict", "conflict")),
        if(config("ui.show-cryptographic-signatures").as_boolean(),
          format_short_cryptographic_signature(commit.signature())),
        if(commit.empty(), label("empty", "(empty)")),
        if(commit.description(),
          commit.description().first_line(),
          label(if(commit.empty(), "empty"), description_placeholder),
        ),
      ) ++ "\n",
    ),
  )
)
'''
"format_timestamp(timestamp)" = 'timestamp.format("%Y-%m-%d %H:%M:%S %Z")'

[revsets]
log-graph-prioritize = "coalesce(megamerge(), @)"

[revset-aliases]
# direct children of x that are not in x
"offshoots(x)" = "x+ ~ x"

# mutable heads, and their parents when they look like WIP
"tips()" = 'heads(mutable()) | (heads(mutable()) & description(exact:""))-'

# Show local work as a forest with linear commit chains elided:
# Mutable heads, local bookmarks, and the immutable commits they're derived from
"forest()" = "tips() | bookmarks() | offshoots(immutable())-"

"megamerge()" = 'latest(subject("megamerge") & mine())'
"mm()" = "megamerge()"

[aliases]
l = ["log"]
forest = ["log", "-r", "forest()"]
bl = ["b", "l"]
wc = ["log", "--stat", "-T", "builtin_log_compact_full_description"]

tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]
aside = ["split", "-r", "@", "--insert-before", "@"]
reball = ["util", "exec", "--", "bash", "-c", '''
set -eu
sources=$(jj log --no-graph -r 'trunk()+ & mutable()' -T 'commit_id ++ "|"')
jj git fetch
jj rebase -s "${sources:0:-1}" -d "trunk()"
jj simplify-parents
''', ""]
newlane = ["util", "exec", "--", "bash", "-c", 'jj rebase -A "trunk()" -B "megamerge()" "$@" && jj new "megamerge()"', ""]

pull = ["git", "fetch"]
push = ["util", "exec", "--", "uvx", "jj-pre-push", "--log-level=INFO", "push"]
pushnew = ["util", "exec", "--", "bash", "-c", 'jj push --named "$1"="${2-@-}"', ""]
pushc = ["util", "exec", "--", "bash", "-c", 'jj push -c "${1-@-}"', ""]

diff2 = ["util", "exec", "--", "env", "DELTA_FEATURES=+side-by-side", "jj", "diff"]
log2 = ["util", "exec", "--", "env", "DELTA_FEATURES=+side-by-side", "jj", "log", "--no-graph", "-p"]
show2 = ["util", "exec", "--", "env", "DELTA_FEATURES=+side-by-side", "jj", "show"]

[fix.tools.1-ruff-lint]
command = ["uvx", "ruff", "check", "--fix", "--quiet", "--stdin-filename=$path", "-"]
patterns = ["glob:'**/*.py'"]

[fix.tools.2-ruff-format]
command = ["uvx", "ruff", "format", "--stdin-filename=$path", "-"]
patterns = ["glob:'**/*.py'"]

[fix.tools.3-terraform-fmt]
command = ["terraform", "fmt", "-"]
patterns = ["glob:'**/*.tf'"]

[fix.tools.4-shfmt]
command = ["shfmt"]
patterns = ["glob:'**/*.sh'"]

[git]
private-commits = '''description(glob:'private:*')'''
